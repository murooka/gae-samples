buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.+'
    }
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'

dependencies {
    implementation 'com.google.appengine:appengine-api-1.0-sdk:+'
    providedCompile "javax.servlet:javax.servlet-api:3.1.+"
    implementation "org.glassfish.jersey.containers:jersey-container-servlet:2.28"
    implementation "org.glassfish.jersey.inject:jersey-hk2:2.28"
    implementation 'com.googlecode.objectify:objectify:6.0.4'
    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.9'

    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
}

appengine {
    run {
        jvmFlags = [
                '-Dappengine.fullscan.seconds=5',
                '-Djava.util.logging.SimpleFormatter.format="%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %4$s %2$s %5$s%6$s%n"',
        ]
    }
    deploy {   // deploy configuration

    }

}

test {
    useJUnit()
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("test: " + descriptor + "  Running")
    }

    onOutput { descriptor, event ->
        logger.lifecycle("test: " + descriptor + ": " + event.message)
    }
    afterTest { descriptor, result ->
        logger.lifecycle("test: " + descriptor + ": " + result)
    }
}

group = "com.example.appenginej8"        // Generated output GroupId
version = "1.0-SNAPSHOT"       // Version in generated output

sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Java 8
